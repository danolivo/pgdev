diff --git a/src/backend/optimizer/path/joinrels.c b/src/backend/optimizer/path/joinrels.c
index 54d1604424..73f738ed81 100644
--- a/src/backend/optimizer/path/joinrels.c
+++ b/src/backend/optimizer/path/joinrels.c
@@ -881,6 +881,7 @@ add_outer_joins_to_relids(PlannerInfo *root, Relids input_relids,
  *	  contains the join clauses and the other clauses applicable for given pair
  *	  of the joining relations.
  */
+static bool force_population = false;
 static void
 populate_joinrel_with_paths(PlannerInfo *root, RelOptInfo *rel1,
 							RelOptInfo *rel2, RelOptInfo *joinrel,
@@ -1033,7 +1034,16 @@ populate_joinrel_with_paths(PlannerInfo *root, RelOptInfo *rel1,
 			elog(ERROR, "unrecognized join type: %d", (int) sjinfo->jointype);
 			break;
 	}
-
+if (force_population)
+{
+	ListCell *lc;
+	foreach(lc, joinrel->pathlist)
+	{
+		Path *p = (Path *) lfirst(lc);
+		p->startup_cost = 1.1;
+		p->total_cost = 1.1;
+	}
+}
 	/* Apply partitionwise join technique, if possible. */
 	try_partitionwise_join(root, rel1, rel2, joinrel, sjinfo, restrictlist);
 
@@ -1672,12 +1682,12 @@ try_partitionwise_join(PlannerInfo *root, RelOptInfo *rel1, RelOptInfo *rel2,
 		Assert(bms_equal(child_joinrel->relids,
 						 adjust_child_relids(joinrel->relids,
 											 nappinfos, appinfos)));
-
+force_population = true;
 		/* And make paths for the child join */
 		populate_joinrel_with_paths(root, child_rel1, child_rel2,
 									child_joinrel, child_sjinfo,
 									child_restrictlist);
-
+force_population = false;
 		pfree(appinfos);
 	}
 }
@@ -1815,11 +1825,12 @@ try_asymmetric_partitionwise_join(PlannerInfo *root,
 //		Assert(bms_equal(child_joinrel->relids,
 //						 adjust_child_relids(joinrel->relids,
 //											 nappinfos, appinfos)));
-
+force_population = true;
 		/* And make paths for the child join */
 		populate_joinrel_with_paths(root, outer_child, inner,
 									child_joinrel, child_sjinfo,
 									child_restrictlist);
+force_population = false;
 
 		pfree(appinfos);
 
